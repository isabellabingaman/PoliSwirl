- Class: meta
  Course: PoliSwirl
  Lesson: ModelingMaps
  Author: Isabella Bingaman
  Type: Standard
  Organization: American University
  Version: 2.4.4

- Class: text
  Output: This lesson will introduce you to some of the unique capabilities that R-Studio has for displaying your data.

- Class: text
  Output: The package maps provides us with a lot of data all about locations around the U.S. and around the world. The maps package works well with ggplot2 to provide you with the opportunity to plot data right onto maps, which often times is a key tool in visualizing political data. 


- Class: text
  Output: The mapdata and maps packages contain outlines of continents, countries, states, and counties. We use the ggplot2 package to actually display the data, firstly with the map_data("name") function, where "name" is a quoted string of the name of a map in the maps and/or mapdata packages.  

- Class: text
  Output: For example, we can assign a USA map from the maps package to an object named usa by running... usa <- map_data("usa"). 

- Class: cmd_question
  Output: Use the above code to assign a USA map to the object named "usa"
  CorrectAnswer: usa <- map_data("usa")
  AnswerTests: omnitest(correctExpr='usa <- map_data("usa")')
  Hint: Use the exact source code. 

- Class: text
  Output: To make a plain black map, we'll use the ggplot2 function geom_polygon().

- Class: video
  Output: If you need a refresher on ggplot2, enlist in the Exploratory Data Anlysis swirl course...
  VideoLink: https://swirlstats.com/scn/eda.html

- Class: text
  Output: The geom_polygon() function draws with no line color, but with black fill. The syntax is simple, we start by initiating a ggplot() and adding our geom_polygon() data using the + sign. The first argument in geom_polygon() identifies the data (in this case, the "usa" object we just created), followed by aes(), where x is intuitively the longitude variable, y is the latitude variable, and group is the group variable.    

- Class: cmd_question
  Output: Run the code using the format described above... ggplot() + geom_polygon(data = usa, aes(x = long, y = lat, group = group)) ... 
  CorrectAnswer: ggplot() + geom_polygon(data = usa, aes(x = long, y = lat, group = group))
  AnswerTests: omnitest(correctExpr='ggplot() + geom_polygon(data = usa, aes(x = long, y = lat, group = group))')
  Hint: Type the exact source code

- Class: figure
  Output: Not too shabby. 
  Figure: map1.R
  FigureType: new

- Class: cmd_question
  Output: The maps packages also have data that tell us about where we can draw boundaries for states. The same way we assigned the "usa" map to the object usa, assign the map_data("state") map to an object named "state" 
  CorrectAnswer: state <- map_data("state")
  AnswerTests: omnitest(correctExpr='state <- map_data("state")')
  Hint: use state <- map_data("state")

- Class: text
  Output: When we use the state data instead of the usa data and set fill = region, R constructs polygons in the shape of the states' boundaries.  

- Class: figure
  Output: When we set the color = "white" the lines that separate the states will be white. 
  Figure: map2.R
  FigureType: new

- Class: text
  Output: When we want to include a map of only one of the states, its as easy as subsetting the data and creating a new map object.

- Class: text
  Output: For example... to make a map of just California, we can assign the object california to a subset of the dataset state where region is == "california". 

- Class: text
  Output: Can you guess what the syntax for the next command is?

- Class: cmd_question
  Output: I bet you were right... enter california <- subset(state, region == "california") to create a california map. 
  CorrectAnswer: california <- subset(state, region == "california")
  AnswerTests: omnitest(correctExpr='california <- subset(state, region == "california")')
  Hint: enter the code exactly as expressed above, notice the two equal signs and california in "quotation marks". 

- Class: text
  Output: Now, we can plot using the same syntax as before, just simply subsituting the usa map data with the california map data.  

- Class: figure
  Output: To remove the noise of the axes gridlines, simply tack + theme_nothing() on to the end of your ggplot function. 
  Figure: map3.R
  FigureType: new

- Class: text
  Output: to take it one step further, maps can even distinguish for us the counties within california. And you guessed it, the county data is stored in map_data("county").

- Class: mult_question
  Output: Just like we made a subset of the state california data, we create a subset of the county data. Which is the correct command to do this?
  AnswerChoices: subset(county, region == "california");subset(county, region = "california");subset(county, region == california)
  CorrectAnswer: subset(county, region == "california")
  AnswerTests: omnitest(correctVal='subset(county, region == "california")')
  Hint: pay attention to the minute details

- Class: text
  Output: Now, we lay the county map on top of the california map by using the + geom_polygon(data = ca_county) function. To create a cleaner looking graph, it's useful to specify whether you want to fill or outline your polygons. 

- Class: figure
  Output: I set fill = NA and give the color = "white" to make a white border. Remember, you can always use the play() function to play around with the console without swirl getting in the way--so feel free to try out any colors or specifications you wish. 
  Figure: map4.R
  FigureType: new

- Class: text
  Output: Now that we know how to make informative maps, we have the perfect place to visualize our geographical data. This is the perfect opportunity to use the left_join() to bring together map data with a corresponding variable in a political dataset. I'm going to join the election data set with the state map data set. Because they both contain the "region" variable, R will automatically join on that variable, although it can be specified.

- Class: mult_question
  Output: Which will correctly join the two data sets?
  AnswerChoices: left_join(us_states, election);join_left(us_states, election);left_join(us_states & election)
  CorrectAnswer: left_join(us_states, election)
  AnswerTests: omnitest(correctVal='left_join(us_states, election)')
  Hint: left_join(us_states, election)


- Class: text
  Output: Now that the two datasets are connected via their geographical data, I can plot the data onto the map. I'm simply using the same state map base and adding on a geom_polygon() that takes on the fill = party argument. 


- Class: figure
  Output: Guidelines and stipulations for color, sizing, and style in ggplot are easily accessible online with a simple Google search of "ggplot aesthetics in R". 
  Figure: map5.R
  FigureType: new

- Class: text
  Output: We can also plot continuous data, which is displayed on a gradient scale of color.  

- Class: text
  Output: By setting the fill = pct_trump, a continuous variable, R-studio will display this data on a gradient color scale by state. Like any other ggplot, we can specify colors, titles, and other aesthetic elements of the map. 

- Class: figure
  Output: Many different types of data can be displayed on maps, but political data is especially viable since we almost always collect geographic information in demographic studies. 
  Figure: map6.R
  FigureType: new
